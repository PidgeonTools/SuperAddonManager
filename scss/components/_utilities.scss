// Sass modules
@use "sass:map";

// Return a theme color variable
@function getColor($category, $color, $modification: "", $color-format: "") {
  @if $modification != "" {
    $modification: "-" + $modification;
  }

  @if $color-format != "" {
    $color-format: "-" + $color-format;
  }

  @return var(--sam-#{$category}-#{$color}#{$modification}#{$color-format});
}

@function getColorFromToken(
  $element,
  $role,
  $status: "base",
  $color-format: ""
) {
  @if $color-format != "" {
    $color-format: "-" + $color-format;
  }

  @return var(--a-sam-#{$element}-#{$role}-#{$status}#{$color-format});
}

// Escape a color to be URL friendly
@function escapeColor($color) {
  @return "%23" + str-slice("#{$color}", 2, -1);
}

@function processColor($col) {
  @if type-of($col) == "color" {
    @return $col;
  }

  @if type-of($col) == "map" {
    $c: map.get($col, "color");

    @if map.get($map: $col, $key: "operation") == "shade" {
      @return mix(black, $c, map.get($col, "percentage"));
    }

    @if map.get($map: $col, $key: "operation") == "tint" {
      @return mix(white, $c, map.get($col, "percentage"));
    }

    @return $c;
  }

  @return #ff0000;
}

// Convert a color to RGB
@function toRGB($color) {
  @return red($color) + ", " + green($color) + ", " + blue($color);
}

// Merge multiple Maps
@function multiMapMerge($maps...) {
  $final-map: ();

  @each $item in $maps {
    $final-map: map.merge($final-map, $item);
  }

  @return $final-map;
}
