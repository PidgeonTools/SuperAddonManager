// This script should be loaded with the "defer" attribute.
(function initialise() {
    const urlParameters = new URLSearchParams(window.location.search);
    let addonName = urlParameters.get("addon_name");
    let issueType = urlParameters.get("issue_type");
    let trackerURL = urlParameters.get("tracker_url");

    if (!addonName) {
        console.warn("Could not find addon name in search parameters");
        addonName = "[Your addon]";
    }

    if (!issueType){
        issueType = "sam_not_supported"
    }

    if (trackerURL) {
        document.getElementById("issue_page").innerHTML = `<a href="${trackerURL}">developer's website.</a>`;
    }

    // === Page elements ===
    const checklistForm = document.getElementById("checklist_form");
    const checklistAddonManagerUpdatedCheckbox = document.getElementById("checklist_addon_manager_updated");
    const checklistAddonUpdatedCheckbox = document.getElementById("checklist_addon_updated");
    const checklistIssueReportedCheckbox = document.getElementById("checklist_issue_reported");

    const issueTextArea = document.getElementById("issue_text");
    const copyIssueButton = document.getElementById("copy_issue");


    // === Functions ===
    // Update the title of the page
    function updateTitle() {
        document.title = `${addonName} - Error checking for updates`;
    }

    // Add the name of the Addon into the page
    function updateAddonName() {
        const addonNameElements = document.getElementsByClassName("addon_name");

        for (addonNameElement of addonNameElements) {
            addonNameElement.innerHTML = addonName;
        }
    }

    // Generates the issue text
    function updateIssueText() {
        const unchecked = "- [ ]";
        const checked = "- [x]";

        const addonManagerUpdated = checklistAddonManagerUpdatedCheckbox.checked ? checked : unchecked;
        const addonUpdated = checklistAddonUpdatedCheckbox.checked ? checked : unchecked;
        const issueReported = checklistIssueReportedCheckbox.checked ? checked : unchecked;

        const intro = `Thank you for enabling support for the Super Addon Manager. Unfortunately, something is wrong with the Implementation:`;
        const outro = `
Thank you for having a look at this :)

**Steps I have taken**
${addonManagerUpdated} Super Addon Manager is up to date.
${addonUpdated} ${addonName} is up to date.
${issueReported} Checked that this issue hasn't been reported already.


This issue report was automatically generated by Super Addon Manager.
        `.trim();

        let text;
        switch (issueType) {
            // TODO: Rewrite error codes FIRST!
            // TODO: Add all other cases
            case "bl_info_no_version":
                text = `
${intro}

In the bl_info dictionary, a parameter called 'version' should be set. This parameter isn't specified, or it's misspelled. Without this parameter, Super Addon Manager can't work. (More details: https://github.com/BlenderDefender/SuperAddonManager/wiki/troubleshooting )

${outro}`
                break;
            default:
                text = `
**Is your feature request related to a problem? Please describe.**
After using Blender for a while now (including your addon ${addonName}),
I've noticed that addon maintenance is a mess. I have multiple addons
installed, and I'm not able to keep track of new versions for all of them. I'm
using the Super Addon Manager by Blender Defender (https://github.com/BlenderDefender/SuperAddonManager)
to do the task of updating ALL of my Addons from a SINGLE PLACE, but it relies
on addon developers enabling support for it.

**Describe the solution you'd like**
It would be great if you could activate support for it. Doing so is easy, 100%
risk-free (no code added to your addon), and platform-independent. You can find
a detailed description for enabling support for Super Addon Manager in the
documentation: https://github.com/BlenderDefender/SuperAddonManager/wiki/implementation/
${outro}`;
                break;
        }
        issueTextArea.value = text.trim();
    }

    function listenForChanges() {
        checklistForm.addEventListener("submit", function(event) {
            // prevent form submitting
            event.preventDefault();
        });
        checklistForm.addEventListener("change", function() {
            // update issue text when any form control changes
            updateIssueText();
        });

        copyIssueButton.addEventListener("click", function(event) {
            event.preventDefault();

            // select all text
            issueTextArea.select();
            // copy to clipboard
            document.execCommand("copy");

            // notify user for 3 seconds
            copyIssueButton.innerText = "Copied!";
            setTimeout(function() {
                // restore button text
                copyIssueButton.innerText = "Copy";
            }, 3 * 1000);
        });
    }


    // === Bootstrap the page ===
    updateTitle();
    updateAddonName();
    updateIssueText();

    listenForChanges();
})();
